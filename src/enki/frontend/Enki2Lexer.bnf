.d-baseclass = "EnkiLexerBase";
.d-header = "module enki.frontend.Enki2Lexer;
import enki.EnkiToken;
import enki.frontend.EnkiLexerBase;
";
.d-classname = "Enki2Lexer";
.d-filename = "./enki/frontend/Enki2Lexer.d";
.bootstrap-classname = "Lexer";
.bootstrap-modulename = "./enki.bootstrap.Lexer";
.bootstrap-filename = "./enki/bootstrap/Lexer.d";
.bnf-filename = "enki/frontend/Enki2Lexer.bnf";
.all-copyright = "
	Copyright (c) 2008 Eric Anderton
	
	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the \"Software\"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:
	
	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
";
err = bool;

Syntax
	= EnkiToken[] tokens
	::= (Whitespace | SlashStarComment | SlashSlashComment | NestingComment | RegexLiteral:~tokens | StringLiteral:~tokens | Number:~tokens | Hex:~tokens | SpecialToken:~tokens | Identifier:~tokens | LiteralToken:~tokens | @err!("Unexpected char"))* eoi;

Whitespace
	::= {" " | "\t" | "\r" | "\n"};

SlashStarComment
	$String err="Expected closing */"
	::= "/*" ?!(err) any* "*/";

SlashSlashComment
	$String err="Expected terminating newline"
	::= "//" ?!(err) any* ("\n" | eoi);

NestingComment
	$String err="Expected closing +/"
	::= "/+" ?!(err) (NestingComment | any)* "+/";

RegexLiteral
	= EnkiToken RegexToken(String text)
	$String err="Expected closing `"
	::= "`" ?!(err) any:text* "`";

StringLiteral
	= EnkiToken StringToken(String text)
	$String err1="Expected closing \"\"\""
	$String err2="Expected closing \""
	$String err3="Expected closing \'"
	::= ("\"\"\"" ?!(err1) any:~text* "\"\"\"") | ("\"" ?!(err2) StringChar:~text* "\"") | ("\'" ?!(err2) StringChar:~text* "\'");

StringChar
	= String ch
	::= "\\" ("n" @NEWLINE:ch | "r" @CARRAIGE_RETURN:ch | "t" @TAB:ch | "\"" @DOUBLE_QUOTE:ch | "\'" @SINGLE_QUOTE:ch | "\\" @SLASH:ch | @err!("Unexpected escape sequence")) | any:ch;

Hex
	= EnkiToken HexToken(String text)
	$String err="Expected two, four or eight hex digits"
	::= "#" ?!(err) ({#30-#39 | #41-#46 | #61-#66}<2,4,8>):text;

Number
	= EnkiToken NumberToken(String text)
	::= #30-#39:~text+;

Identifier
	= EnkiToken IdentifierToken(String text)
	::= ((#41-#5A | #61-#7A | "_") (#30-#39 | #41-#5A | #61-#7A | "_")*):text;

SpecialToken
	= EnkiToken CreateToken(String text,uint tok)
	::= "new" @TOK_NEW:tok | "::=" @TOK_RULEASSIGN:tok | "?!" @TOK_ERRORPOINT:tok | ".." @TOK_RANGE:tok;

LiteralToken
	= EnkiToken LiteralToken(String text)
	::= (#21-#2F | #3A-#40 | #5B-#60 | #7B-#7E):text;

