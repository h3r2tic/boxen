.d-baseclass = "Enki2ParserBase";
.d-header = "module enki.frontend.Enki2Parser;
private import enki.frontend.Frontend;
private import enki.frontend.Enki2ParserBase;
private import enki.EnkiToken;
private import enki.Binding;
private import enki.Expression;
private import enki.Param;
private import enki.ProductionArg;
private import enki.Rule;
private import enki.RulePredicate;
";
.d-classname = "Enki2Parser";
.d-filename = "enki/frontend/Enki2Parser.d";
.bootstrap-classname = "Parser";
.bootstrap-modulename = "enki.bootstrap.Parser";
.bootstrap-filename = "enki/bootstrap/Parser.d";
.bnf-filename = "enki/frontend/Enki2Parser.bnf";
.all-copyright = "
	Copyright (c) 2008 Eric Anderton
	
	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the \"Software\"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or
	sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:
	
	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
";
err = bool;

Syntax
	::= (Prototype | Alias | Rule | Directive | Attribute)* eoi;

Prototype
	= void addPrototype(String name,String returnType)
	::= Identifier:name "=" Identifier:returnType ";";

Alias
	= void addAlias(String aliasName,String ruleName)
	::= Identifier:aliasName &TOK_RULEASSIGN Identifier:ruleName ";";

Rule
	= void addRule(String name,Param[] decl,RulePredicate pred,Param[] vars,Expression expr)
	$String err1="Missing \';\'"
	$String err2="Expected \'::=\'"
	::= Identifier:name [RuleDecl:decl] [RulePredicate:pred] ?!(err2) RuleVar:~vars* &TOK_RULEASSIGN Expression:~expr ?!(err1) ";";

RuleDecl
	= Param[] params
	::= ParamsExpr:params;

RulePredicate
	= RulePredicate pred
	::= "=" (ClassPredicate:pred | FunctionPredicate:pred | BindingPredicate:pred | @err!("Expected Rule Predicate."));

ClassPredicate
	= new ClassPredicate(String name,Param[] params)
	::= &TOK_NEW Identifier:name ParamsExpr:params;

FunctionPredicate
	= new FunctionPredicate(Param decl,Param[] params)
	::= ExplicitParam:decl ParamsExpr:params;

BindingPredicate
	= new BindingPredicate(Param param)
	::= Param:param;

RuleVar
	= Param var
	::= "$" Param:var;

ParamsExpr
	= Param[] params
	::= "(" Param:~params* % "," ")";

Param
	= Param param
	::= ExplicitParam:param | WeakParam:param;

WeakParam
	= new Param(String type,String name,String value)
	::= Identifier:name ["=" &TOK_STRING:value];

ExplicitParam
	= new Param(String type,String name,String value)
	::= ParamType:type Identifier:name ["=" &TOK_STRING:value];

ParamType
	::= Identifier ["[" [ParamType] "]"];

Expression ::= OrGroup;

OrGroup
	= new OrGroup(Expression[] exprs)
	::= {AndGroup:~exprs} % "|";

AndGroup
	= new AndGroup(Expression[] exprs)
	::= {SubExpression:~exprs};

SubExpression
	= Expression expr
	::= (Production:expr | Substitution:expr | Terminal:expr | CharacterRange:expr | Regexp:expr | GroupExpr:expr | OneOrMoreExpr:expr | OptionalExpr:expr | NegateExpr:expr | TestExpr:expr | LiteralExpr:expr | CustomTerminal:expr | ErrorPoint:expr) [IteratorExpr!(expr):expr];

Production
	= new Production(String name,Binding binding,ProductionArg[] args)
	::= Identifier:name ["!" "(" ProductionArg:~args* % "," ")"] [Binding:binding];

ProductionArg
	= ProductionArg arg
	::= StringProductionArg:arg | BindingProductionArg:arg;

StringProductionArg
	= new StringProductionArg(String value)
	::= &TOK_STRING:value;

BindingProductionArg
	= new BindingProductionArg(String value)
	::= Identifier:value;

Substitution
	= new Substitution(String name,Binding binding)
	::= "." Identifier:~name [Binding:binding];

GroupExpr
	= new Group(Expression expr,Binding binding)
	::= "(" Expression:expr ")" [Binding:binding];

OneOrMoreExpr
	= new OneOrMoreExpr(Expression expr,Binding binding)
	::= "{" Expression:expr "}" [Binding:binding];

IteratorExpr(Expression expr)
	= Expression Iterator.create(Expression expr,Expression delim,Expression term,Range[] ranges)
	::= (RangeSetExpr:ranges ["%" SubExpression:delim] | "%" SubExpression:delim) [SubExpression:term];

RangeSetExpr
	= Range[] ranges
	::= ZeroOrMoreRange:~ranges | OneOrMoreRange:~ranges | OptionalRange:~ranges | "<" {IteratorRangeExpr:~ranges} % "," ">";

ZeroOrMoreRange
	= Range Range.ZeroOrMore()
	::= "*";

OneOrMoreRange
	= Range Range.OneOrMore()
	::= "+";

OptionalRange
	= Range Range.Optional()
	::= "?";

IteratorRangeExpr
	= Range Range(int start,int end)
	::= &TOK_RANGE &TOK_NUMBER:end | /&TOK_NUMBER:start &TOK_NUMBER:end [&TOK_RANGE &TOK_NUMBER:end];

OptionalExpr
	= new Optional(Expression expr,Binding binding)
	$String err1="Expected Expression"
	$String err2="Expected Closing \']\'"
	::= "[" ?!(err1) Expression:expr ?!(err2) "]" [Binding:binding];

Terminal
	= new Terminal(String text,Binding binding)
	::= &TOK_STRING:text [Binding:binding];

CharacterRange
	= new CharRange(String start,String end,Binding binding)
	::= /&TOK_HEX:end &TOK_HEX:start ["-" &TOK_HEX:end] [Binding:binding];

Regexp
	= new RegularExpression(String text,Binding binding)
	::= &TOK_REGEX:text [Binding:binding];

NegateExpr
	= new Negate(Expression expr)
	::= "^" SubExpression:expr;

TestExpr
	= new Test(Expression expr)
	::= "/" SubExpression:expr;

LiteralExpr
	= new Literal(String name,Binding binding,ProductionArg[] args)
	::= "@" Identifier:name ["!" "(" ProductionArg:~args* % "," ")"] [Binding:binding];

CustomTerminal
	= new CustomTerminal(String name,Binding binding)
	::= "&" Identifier:name [Binding:binding];

ErrorPoint
	= new ErrorPoint(ProductionArg arg,Expression expr)
	::= &TOK_ERRORPOINT "(" ProductionArg:arg ")" SubExpression:expr;

Binding
	= new Binding(String name,bool isConcat)
	::= ":" ["~" @true:isConcat] Identifier:name;

Identifier
	= String concatTokens(Atom[] value)
	::= ({&TOK_IDENT} % "."):value;

Directive
	= void runDirective(String name,String[] args)
	$String err1="Expected directive name"
	$String err2="Expected \';\'"
	::= "@" ?!(err1) Identifier:name ["(" (Identifier:~args | &TOK_STRING:~args)* % "," ")"] ?!(err2) ";";

Attribute
	= void setAttribute(String namespace,String name,String value)
	$String err1="Expected \'=\'"
	$String err1="Expected \';\'"
	::= "." [&TOK_IDENT:namespace "-"] &TOK_IDENT:name ?!(err1) "=" (Identifier:value | &TOK_STRING:value) ?!("err2") ";";

