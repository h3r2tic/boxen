float Strauss_fresnel(float x) {
	const float Kf = 1.12f;
	float numer = 1.0f / ((x - Kf) * (x - Kf))  -  1.0f / (Kf * Kf);
	float denom = 1.0f / ((1.0f - Kf) * (1.0f - Kf)) - 1.0f / (Kf * Kf);
	return numer / denom;
}

float Strauss_shadow(float x) {
	const float Ks = 1.01f;
	float oneMinKs2 = (1.0f - Ks) * (1.0f - Ks);
	float numer = 1.0f / (oneMinKs2) - 1.0f / ((x - Ks) * (x - Ks));
	float denom = 1.0f / oneMinKs2 - 1.0f / (Ks * Ks);
	return numer / denom;
}

void StraussBRDF(
	float4 lightIntensity,
	float3 normal,
	float3 point,
	float3 toLight,
	float fSmoothness,
	float fMetalness,
	out float4 diffuse,
	out float4 specular
) {
	float3 n = normal;
	float3 l = toLight;
	float3 v = normalize(envData.eyePos - point);
	// float3 h = reflect(l, n);	// original
	float3 h = normalize(l + v);	// modified
	
	const float fTransparency = 0.0f;
	
	float NdotL   = saturate(dot( n, l ).x);
	float NdotV   = saturate(dot( n, v ).x);
	// float specBase   = dot( h, v ).x;	// original
	float specBase   = dot( h, n ).x;	// modified
	
	float NdotLangleTimes2ByPi = acos(NdotL) * 2.0f / 3.14159265;
	float NdotVangleTimes2ByPi = acos(NdotV) * 2.0f / 3.14159265;
	
	float fNdotL  = Strauss_fresnel( NdotLangleTimes2ByPi );
	float s_cubed = fSmoothness * fSmoothness * fSmoothness;

	// Evaluate the diffuse term
	float d  = ( 1.0f - fMetalness * fSmoothness );
	float Rd = ( 1.0f - s_cubed ) * ( 1.0f - fTransparency );
	float diffuse_ = NdotL * d * Rd;

	// Compute the inputs into the specular term
	float r = ( 1.0f - fTransparency ) - Rd;

	float j = fNdotL * Strauss_shadow( NdotLangleTimes2ByPi ) * Strauss_shadow( NdotVangleTimes2ByPi );

	// 'k' is used to provide small off-specular
	// peak for very rough surfaces. Can be changed
	// to suit desired results...
	const float k = 0.1f;
	float reflect = min(1.0f, r + j * ( r + k ));

	float Css = 1.0f - fMetalness * (1.0f - fNdotL);
	float Csd = fMetalness * (1.0f - fNdotL);

	// Evaluate the specular term
	float specular_s = Css * reflect;
	float specular_d = Csd * reflect;
	
	float specMult = pow( saturate(specBase), 3.0f / (1.0f - fSmoothness) );
	
	specular_s *= specMult;
	specular_d *= specMult;
	
	specular_s = max(0.0f, specular_s);
	specular_d = max(0.0f, specular_d);
	diffuse_ = max(float3(0, 0, 0), diffuse_);

	// Composite the final result, ensuring
	// the values are >= 0.0f yields better results. Some
	// combinations of inputs generate negative values which
	// looks wrong when rendered...
	diffuse  = lightIntensity * max(0.0f, (diffuse_ + specular_d));
	specular = lightIntensity * specular_s;
}
