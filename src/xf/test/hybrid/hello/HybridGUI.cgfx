struct vertInput {
	float2 position : POSITION;
	float4 color : TEXCOORD0;
	float2 texCoord : TEXCOORD1;
	float2 subpixelSamplingVector : TEXCOORD2;
};

struct fragInput {
	float2 position : TEXCOORD0;
	float4 color : TEXCOORD1;
	float2 texCoord : TEXCOORD2;
	float2 subpixelSamplingVector : TEXCOORD3;
};


mat4 worldToClip <string scope="effect";>;


void VertexProgram(
	in vertInput input,
	out float4 outPos : POSITION,
	out fragInput output
) {
	outPos = mul(worldToClip, float4(input.position, 0, 1));
	output.position = input.position;
	output.color = input.color;
	output.texCoord = input.texCoord;
	output.subpixelSamplingVector = input.subpixelSamplingVector;
}


void FragmentProgram(
	in fragInput input,
	uniform sampler2D tex,
	out float4 col0 : COLOR0,
	out float4 col1 : COLOR1
) {
	float2 spsv = input.subpixelSamplingVector;
	float2 base = input.texCoord;

	float4 tm4 = tex2D(tex, base - 4 * spsv / 3);
	float4 tm3 = tex2D(tex, base - spsv);
	float4 tm2 = tex2D(tex, base - 2 * spsv / 3);
	float4 tm1 = tex2D(tex, base - spsv / 3);
	float4 t0 = tex2D(tex, base);
	float4 tp1 = tex2D(tex, base + spsv / 3);
	float4 tp2 = tex2D(tex, base + 2 * spsv / 3);
	float4 tp3 = tex2D(tex, base + spsv);
	float4 tp4 = tex2D(tex, base + 4 * spsv / 3);

	//const float4 wb = float4(0.08, 0.24, 0.36, 0.24);
	//const float4 wb = float4(0.07, 0.23, 0.40, 0.23);
	//const float4 wb = float4(0.06, 0.19, 0.5, 0.19);

	// lanczos2
	const float w3 = -0.0162714;
	const float w2 = -0.0205235;
	const float w1 =  0.269114;
	const float w0 =  0.535361;

	// trunc sinc 1.5
/*	const float w3 = -0.0733487;
	const float w2 =  0.0715252;
	const float w1 =  0.297742;
	const float w0 =  0.408163;*/

/*	const float w3 = 0;
	const float w2 = 0;
	const float w1 = 0;
	const float w0 = 1;*/
	
	const float4 wb = float4(w2, w1, w0, w1);

	const float4 wv1 = float4(w3, w2, w1, w0);
	const float3 wv2 = float3(w1, w2, w3);

	col0 = float4(
		dot(wv1, float4(tm4.x, tm3.x, tm2.x, tm1.x)) + dot(wv2, float3(t0.x,  tp1.x, tp2.x)),
		dot(wv1, float4(tm3.y, tm2.y, tm1.y, t0.y )) + dot(wv2, float3(tp1.y, tp2.y, tp3.y)),
		dot(wv1, float4(tm2.z, tm1.z, t0.z,  tp1.z)) + dot(wv2, float3(tp2.z, tp3.z, tp4.z)),
		1
	) * float4(input.color.xyz, 1.0);

	float3 mask = float3(
		dot(wv1, float4(tm4.w, tm3.w, tm2.w, tm1.w)) + dot(wv2, float3(t0.w,  tp1.w, tp2.w)),
		dot(wv1, float4(tm3.w, tm2.w, tm1.w, t0.w )) + dot(wv2, float3(tp1.w, tp2.w, tp3.w)),
		dot(wv1, float4(tm2.w, tm1.w, t0.w,  tp1.w)) + dot(wv2, float3(tp2.w, tp3.w, tp4.w))
	);

	col1 = float4(mask, 1) * input.color.wwww;
	col0 *= col1;

	const float a = 0.055f;
	
	col1 =
		col1 <= 0.0031308
		? 12.92 * col1
		: ((1.0 + a ) * pow(col1, 1.0/2.4) - a);
}
