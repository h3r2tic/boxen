converter(30) normalizer(in a <type float3>, out b <in.a.actual + unit true>) {
	b = normalize(a);
}

converter<linear>(20) normal2color (
	in a <type float3 + use normal + basis world>,
	out b <in.a.actual + type float4 + use color>
) {
	b = float4((a + 1.0f) * 0.5f, 1.0f);
}

converter<linear>(10) vec4to3 (
	in a <type float4>,
	out b <in.a.actual + type float3>
) {
	b = a.xyz;
}


converter<linear>(20) model2world_p (
	in a <type float3 + basis model + use position>,
	out b <in.a.actual + basis world>
) {
	b = mul(modelToWorld, float4(a, 1)).xyz;
}

converter<linear>(20) model2world_n (
	in a <type float3 + basis model>,
	out b <in.a.actual + basis world>
) {
	b = mul(modelToWorld, float4(a, 0)).xyz;
}

converter<linear>(20) world2view_p (
	in a <type float3 + basis world + use position>,
	out b <in.a.actual + type float3 + basis view>
) {
	b = mul(worldToView, float4(a, 1.0)).xyz;
}

converter<linear>(20) world2view_n (
	in a <type float3 + basis world>,
	out b <in.a.actual + type float3 + basis view>
) {
	b = mul(worldToView, float4(a, 0.0)).xyz;
}

converter<linear>(20) view2world_n (
	in a <type float3 + basis view>,
	out b <in.a.actual + type float3 + basis world>
) {
	b = mul(viewToWorld, float4(a, 0.0)).xyz;
}

converter<linear>(20) view2world_p (
	in a <type float3 + basis view + use position>,
	out b <in.a.actual + type float3 + basis world>
) {
	b = mul(viewToWorld, float4(a, 1.0)).xyz;
}

converter<linear>(20) view2clip (
	in a <type float3 + basis view + use position>,
	out b <in.a.actual + type float4 + basis clip + type float4>
) {
	b = mul(viewToClip, float4(a, 1.0));
}

converter<linear>(20) computeToEye (
	in position <type float3 + basis world + use position>,
	out toEye <type float3 + basis world + use toEye>
) {
	toEye = eyePosition - position;
}
