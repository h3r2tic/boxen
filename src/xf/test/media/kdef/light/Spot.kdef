SpotLight_VSM = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type float3 + use lightPos> = 0 1 -2,
			lumIntens <type float4 + use lumIntens> = 1 1 1 1,
			radius <type float> = 5,
			influenceRadius <type float>,
			depthSampler <type sampler2D + use depth>,
			spotlightMask <type sampler2D + use color>,
			light_worldToClip <type float4x4>
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			radius <type float>,
			influenceRadius <type float>,
			lightPos <type float3 + use lightPos>,
			lumIntens <type float4 + use lumIntens>,
			depthSampler <type sampler2D + use depth>,
			spotlightMask <type sampler2D + use color>,
			light_worldToClip <type float4x4>
		) {
			float4 pointClip = mul(light_worldToClip, float4(position.xyz, 1.0));
			float2 pointClipDiv = pointClip.xy / pointClip.w;
			float3 cullVals = float3(1.0 - pointClip.z, abs(pointClipDiv));

			float3 pointViewPos = mul(worldToView, float4(position, 1)).xyz;

			if (all(cullVals < 1)) {
				toLight = lightPos - position;
				float distToLight = length(toLight);
				float atten = distToLight / influenceRadius;
				intensity = lumIntens * ((1.0 - smoothstep(0.0, 1.0, atten*atten)) / (1.0 + dot(toLight, toLight).x));
				//intensity = lumIntens * saturate(( 2.0 / (1.0 + atten*atten) ) - 1.0);
				lightSize = max(0.02, min(2000.0, radius*radius*3.1415926 / dot(toLight, toLight).x));
				toLight = normalize(toLight);

				float2 uv = (pointClipDiv) * 0.5 + 0.5;
				float2 shadowSample = tex2D(depthSampler, uv).xy * 0.5 + 0.5;

				float mean = shadowSample.x;
				float variance = max(0.00000001, shadowSample.y - shadowSample.x * shadowSample.x);
				float shadowed1 = atten <= mean;
				float meh = (atten - mean) * (atten - mean);
				float shadowed2 = variance / (variance + meh);
				float shadowed = saturate(max(shadowed1, shadowed2));

				const float shadowDarkening = 0.2;
				shadowed = clamp(
					(shadowed - shadowDarkening) / (1.0 - shadowDarkening),
					0.0,
					1.0
				);

				float4 mask = tex2Dlod(spotlightMask, float4(uv, 0, 0));
				
				intensity *= shadowed * mask;
				//intensity = float4(uv, 0, 0);
				//intensity = mask;
				//intensity = mean;
			} else {
				intensity = 0;
				lightSize = 0;
				toLight = float3(0, 1, 0);
			}
		};
	};
	n3 = node {
		type = output;
	};

	connect n1.radius n2.radius;
	connect n1.influenceRadius n2.influenceRadius;
	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};


SpotLight_SM = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type float3 + use lightPos> = 0 1 -2,
			lumIntens <type float4 + use lumIntens> = 1 1 1 1,
			radius <type float> = 5,
			influenceRadius <type float>,
			depthSampler <type sampler2D + use depth>,
			spotlightMask <type sampler2D + use color>,
			light_worldToClip <type float4x4>
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			radius <type float>,
			influenceRadius <type float>,
			lightPos <type float3 + use lightPos>,
			lumIntens <type float4 + use lumIntens>,
			depthSampler <type sampler2D + use depth>,
			spotlightMask <type sampler2D + use color>,
			light_worldToClip <type float4x4>
		) {
			float4 pointClip = mul(light_worldToClip, float4(position.xyz, 1.0));
			float2 pointClipDiv = pointClip.xy / pointClip.w;
			float3 cullVals = float3(1.0 - pointClip.z, abs(pointClipDiv));

			float3 pointViewPos = mul(worldToView, float4(position, 1)).xyz;

			if (all(cullVals < 1)) {
				toLight = lightPos - position;
				float distToLight = length(toLight);
				float atten = distToLight / influenceRadius;
				intensity = lumIntens * ((1.0 - smoothstep(0.0, 1.0, atten*atten)) / (1.0 + dot(toLight, toLight).x));
				lightSize = max(0.02, min(2000.0, radius*radius*3.1415926 / dot(toLight, toLight).x));
				toLight = normalize(toLight);

				float attenDDX = ddx(atten);
				float attenDDY = ddy(atten);

//				atten -= 10.0 * max(0.0f, min(0.00002f, (abs(attenDDX) + abs(attenDDY))));
				atten -= 0.001;

				float2 uv = (pointClipDiv) * 0.5 + 0.5;
				float smDepth = tex2D(depthSampler, uv).x;
				float shadowed = atten <= smDepth;
				float4 mask = tex2Dlod(spotlightMask, float4(uv, 0, 0));
				intensity *= shadowed * mask;
			} else {
				intensity = 0;
				lightSize = 0;
				toLight = float3(0, 1, 0);
			}
		};
	};
	n3 = node {
		type = output;
	};

	connect n1.radius n2.radius;
	connect n1.influenceRadius n2.influenceRadius;
	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};


VSMBlur = graph PostProcess {
	input = node {
		type = input;
	};

	blur1 = node {
		type = kernel;
		kernel = Blur3;
	};

	sampleOrig = node {
		type = kernel;
		kernel = SampleImage;
	};

	output = node {
		type = output;
	};
	
	connect input sampleOrig;
	connect sampleOrig.sample blur1.input;
	connect input.size blur1.inputSize;
	connect blur1 output;

	noauto sampleOrig.uv;
};

