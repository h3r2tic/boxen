PointLight = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type float3 + use lightPos> = 0 1 -2,
			lumIntens <type float4 + use lumIntens> = 1 1 1 1,
			lightRadius <type float> = 5,
			influenceRadius <type float>
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			lightRadius <type float>,
			influenceRadius <type float>,
			lightPos <type float3 + use lightPos>,
			lumIntens <type float4 + use lumIntens>
		) {
			toLight = lightPos - position;
//			float atten = length(toLight) / influenceRadius;
			float toLight2 = dot(toLight, toLight).x;
			float atten2 = toLight2 / (influenceRadius * influenceRadius);
			intensity = lumIntens * ((smoothstep(1.0, 0.0, atten2)) / (1.0 + toLight2));
//			intensity = lumIntens / (0.5 + dot(toLight, toLight).xxxx);
//			intensity = lumIntens * max(0.0, (4.0 * exp(-6* atten) - 0.01));
//			intensity = lumIntens / dot(toLight, toLight).xxxx;
			lightSize = lightRadius;// / length(toLight);
//			toLight = normalize(toLight);
		};
	};
	n3 = node {
		type = output;
	};

	connect n1.lightRadius n2.lightRadius;
	connect n1.influenceRadius n2.influenceRadius;
	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};

