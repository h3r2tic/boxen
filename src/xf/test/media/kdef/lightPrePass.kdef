LightPrePassGeomOut = kernel(
	in position <type float3 + use position + basis view>,
	in normal <type float3 + use normal + unit true + basis view>,
	in surfaceId <type float>,
	
	out out_packed1 <type float4 + bindingSemantic COLOR0>,
	out out_depth <type float + bindingSemantic COLOR1>,
) {
	out_depth = -position.z / farPlaneDistance;

	/+float scale = 1.7777;
	float2 enc = normal.xy / (normal.z+1);
	enc /= scale;
	enc = enc*0.5+0.5;+/

	float f = sqrt(8*normal.z+8);
	float2 enc = normal.xy / f + 0.5;
	
	out_packed1 = float4(enc, surfaceId, 0);
};


LPP_GetSurfaceParam = kernel(
	in idx <type float>,
	out value <type float4>
);


LightPrePassLightIn = graph {
	input = node {
		type = input;
		params = (
			posRadius <type float4>
		);
	};

	data = node {
		type = data;
		params = (
			depthSampler <type sampler2D>,
			packed1Sampler <type sampler2D>,
			surfaceParamSampler <type sampler2D>
		);
	};

	rast = node {
		type = kernel;
		kernel = kernel GeometryShader(
			in posRadius <type float4>
		) {
			for (int i = 0; i < posRadius.length; ++i) {
				float cubeHalfSize = posRadius[i].w;

				float4 xshift = float4(cubeHalfSize, 0, 0, 0);
				float4 yshift = float4(0, cubeHalfSize, 0, 0);
				float4 zshift = float4(0, 0, cubeHalfSize, 0);

				float4 pos = float4(posRadius[i].xyz, 1.0);
				float4 v000 = mul(worldToClip, pos - xshift - yshift - zshift);
				float4 v001 = mul(worldToClip, pos - xshift - yshift + zshift);
				float4 v010 = mul(worldToClip, pos - xshift + yshift - zshift);
				float4 v011 = mul(worldToClip, pos - xshift + yshift + zshift);
				float4 v100 = mul(worldToClip, pos + xshift - yshift - zshift);
				float4 v101 = mul(worldToClip, pos + xshift - yshift + zshift);
				float4 v110 = mul(worldToClip, pos + xshift + yshift - zshift);
				float4 v111 = mul(worldToClip, pos + xshift + yshift + zshift);
				
				// front face
				clipSpacePosition = v011; emitVertex(i);
				clipSpacePosition = v001; emitVertex(i);
				clipSpacePosition = v111; emitVertex(i);
				clipSpacePosition = v101; emitVertex(i);
				restartStrip();
				
				// left face
				clipSpacePosition = v010; emitVertex(i);
				clipSpacePosition = v000; emitVertex(i);
				clipSpacePosition = v011; emitVertex(i);
				clipSpacePosition = v001; emitVertex(i);
				restartStrip();
				
				// right face
				clipSpacePosition = v111; emitVertex(i);
				clipSpacePosition = v101; emitVertex(i);
				clipSpacePosition = v110; emitVertex(i);
				clipSpacePosition = v100; emitVertex(i);
				restartStrip();
				
				// back face
				clipSpacePosition = v110; emitVertex(i);
				clipSpacePosition = v100; emitVertex(i);
				clipSpacePosition = v010; emitVertex(i);
				clipSpacePosition = v000; emitVertex(i);
				restartStrip();
				
				// bottom face
				clipSpacePosition = v001; emitVertex(i);
				clipSpacePosition = v000; emitVertex(i);
				clipSpacePosition = v101; emitVertex(i);
				clipSpacePosition = v100; emitVertex(i);
				restartStrip();
				
				// top face
				clipSpacePosition = v010; emitVertex(i);
				clipSpacePosition = v011; emitVertex(i);
				clipSpacePosition = v110; emitVertex(i);
				clipSpacePosition = v111; emitVertex(i);
				restartStrip();
			}
		};
	};

	genScreenUV = node {
		type = kernel;
		kernel = kernel(
			in position <type float4 + use position + basis clip>,
			out uv <type float2 + use uv>
		) {
			uv = (position.xy / position.w + float2(1)) * 0.5f;
		};
	};

	sampleDepth = node {
		type = kernel;
		kernel = Tex2D;
	};

	samplePacked1 = node {
		type = kernel;
		kernel = Tex2D;
	};

	reconstructPosition = node {
		type = kernel;
		kernel = kernel(
			in position <type float4 + use position + basis clip>,
			in depth_ <type float4>,
			out out_position <type float3 + use position + basis view>
		) {
			float depth = depth_.x * farPlaneDistance;
			float fragW = -depth / viewToClip._m22;
			float4 unProj = mul(clipToView, position * (fragW / position.w));
			out_position = unProj.xyz;
		};
	};

	reconstructPacked1 = node {
		type = kernel;
		kernel = kernel(
			in input <type float4>,
			out normal <type float3 + use normal + basis view + unit true>,
			out materialId <type float>,
			out param1 <type float>
		) {
/+			// enc4 is float4, with .rg containing encoded normal
			float scale = 1.7777;
			float3 nn = float3(input.xy * float2(2*scale,2*scale), 1.0) + float3(-scale,-scale,0);
			float g = 2.0 / dot(nn.xyz,nn.xyz);
			normal.xy = g*nn.xy;
			normal.z = g-1;+/

			float2 enc = input.xy;
			float2 fenc = enc*4-2;
			float f = dot(fenc,fenc);
			float g = sqrt(1-f/4);
			normal.xy = fenc*g;
			normal.z = 1-f/2;

			materialId = input.z;
			param1 = input.w;
		};
	};

	getSurfParam = node {
		type = kernel;
		kernel = kernel LPP_GetSurfaceParam(
			in sampler <type sampler2D>,
			in materialId <type float>
		) {
			value = tex2D(sampler, float2(idx, materialId));
		};
	};

	output = node {
		type = output;
		params = (
			position,
			normal,
			materialId,
			param1,
			getSurfaceParam
		);
	};

	connect input.posRadius rast.posRadius;
	connect rast.clipSpacePosition genScreenUV.position;
	connect rast.clipSpacePosition reconstructPosition.position;
	
	connect genScreenUV.uv sampleDepth.uv;
	connect genScreenUV.uv samplePacked1.uv;
	connect data.depthSampler sampleDepth.texture;
	connect data.packed1Sampler samplePacked1.texture;
	
	connect sampleDepth.sample reconstructPosition.depth_;
	connect samplePacked1.sample reconstructPacked1.input;
	
	connect reconstructPosition.out_position output.position;
	connect reconstructPacked1.normal output.normal;
	connect reconstructPacked1.materialId output.materialId;
	connect reconstructPacked1.param1 output.param1;

	connect getSurfParam.value				output.getSurfaceParam;
	connect reconstructPacked1.materialId	getSurfParam.materialId;
	connect data.surfaceParamSampler		getSurfParam.sampler;
	noauto getSurfParam.idx;
};


LightPrePassFinalOut = graph {
	input = node {
		type = input;
		params = (
			position <type float4 + use position + basis clip>,
			albedo <type float4 + use color>,
			specular <type float4 + use color>,
			emissive <type float4 + use color>
		);
	};

	data = node {
		type = data;
		params = (
			diffuseIlluminationSampler <type sampler2D + use diffuse>,
			specularIlluminationSampler <type sampler2D + use specular>
		);
	};

	calc = node {
		type = kernel;
		kernel = kernel(
			in position <type float4 + use position + basis clip>,
			in albedo <type float4 + use color>,
			in specular <type float4 + use color>,
			in emissive <type float4 + use color>,
			in diffuseIlluminationSampler <type sampler2D + use diffuse>,
			in specularIlluminationSampler <type sampler2D + use specular>,
			out color <type float4 + use color>
		) {
			float2 uv = (position.xy / position.w + float2(1)) * 0.5f;
			color =
				albedo * tex2D(diffuseIlluminationSampler, uv)
			+	specular * tex2D(specularIlluminationSampler, uv)
			+	emissive;
//			color = tex2D(specularIlluminationSampler, uv);
		};
	};

	output = node {
		type = output;
		params = (
			color <type float4 + use color>
		);
	};

	connect input.albedo calc.albedo;
	connect input.specular calc.specular;
	connect input.emissive calc.emissive;
	connect input calc;
	connect data calc;
	connect calc output;
};

