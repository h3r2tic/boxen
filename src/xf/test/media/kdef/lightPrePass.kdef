LightPrePassGeomOut = kernel(
	in position <type float3 + use position + basis view>,
	in normal <type float3 + use normal + unit true + basis view>,
	in surfaceId <type float>,
	
	out out_depth <type float + bindingSemantic DEPTH>,
	out out_packed1 <type float4>
) {
	out_depth = -position.z / farPlaneDistance;

	float scale = 1.7777;
	float2 enc = normal.xy / (normal.z+1);
	enc /= scale;
	enc = enc*0.5+0.5;
	
	out_packed1 = float4(enc, surfaceId, 0);
};


LPP_GetSurfaceParam = kernel(
	in idx <type float>,
	out value <type float4>
);


LightPrePassLightIn = graph {
	input = node {
		type = input;
		params = (
			position <type float3 + use position + basis model>
		);
	};

	data = node {
		type = data;
		params = (
			depthSampler <type sampler2D>,
			packed1Sampler <type sampler2D>,
			surfaceParamSampler <type sampler2D>
		);
	};

	rast = node {
		type = kernel;
		kernel = Rasterize;
	};

	genScreenUV = node {
		type = kernel;
		kernel = kernel(
			in position <type float4 + use position + basis clip>,
			out uv <type float2 + use uv>
		) {
			uv = (position.xy / position.w + float2(1)) * 0.5f;
		};
	};

	sampleDepth = node {
		type = kernel;
		kernel = Tex2D;
	};

	samplePacked1 = node {
		type = kernel;
		kernel = Tex2D;
	};

	reconstructPosition = node {
		type = kernel;
		kernel = kernel(
			in position <type float4 + use position + basis clip>,
			in depth_ <type float4>,
			out out_position <type float3 + use position + basis view>
		) {
			float depth = depth_.x *= farPlaneDistance;
			float fragW = -(depth - viewToClip._m23) / context.viewToClip._m22;
			float4 unProj = mul(context.clipToView, position * (fragW / position.w));
			out_position = unProj.xyz;
		};
	};

	reconstructPacked1 = node {
		type = kernel;
		kernel = kernel(
			in input <type float4>,
			out normal <type float3 + use normal + basis view + unit true>,
			out materialId <type float>,
			out param1 <type float>
		) {
			// enc4 is float4, with .rg containing encoded normal
			float scale = 1.7777;
			float3 nn = input.xyz*float3(2*scale,2*scale,0) + float3(-scale,-scale,1);
			float g = 2.0 / dot(nn.xyz,nn.xyz);
			normal.xy = g*nn.xy;
			normal.z = g-1;
			materialId = input.z;
			param1 = input.w;
		};
	};

	getSurfParam = node {
		type = kernel;
		kernel = kernel LPP_GetSurfaceParam(
			in sampler <type sampler2D>,
			in materialId <type float>
		) {
			return tex2D(sampler, float2(idx, materialId));
		};
	};

	output = node {
		type = output;
		params = (
			position,
			normal,
			materialId,
			param1,
			getSurfaceParam
		);
	};

	connect input.position rast.inPos;
	connect input.position genScreenUV.position;
	connect input.position reconstructPosition.position;
	
	connect genScreenUV.uv sampleDepth.uv;
	connect genScreenUV.uv samplePacked1.uv;
	connect data.depthSampler sampleDepth.texture;
	connect data.packed1Sampler samplePacked1.texture;
	
	connect sampleDepth.sample reconstructPosition.depth_;
	connect samplePacked1.sample reconstructPacked1.input;
	
	connect reconstructPosition.out_position output.position;
	connect reconstructPacked1.normal output.normal;
	connect reconstructPacked1.materialId output.materialId;
	connect reconstructPacked1.param1 output.param1;

	connect getSurfParam.value				output.getSurfaceParam;
	connect reconstructPacked1.materialId	getSurfParam.materialId;
	connect data.surfaceParamSampler		getSurfParam.sampler;
	noauto getSurfParam.idx;
};
