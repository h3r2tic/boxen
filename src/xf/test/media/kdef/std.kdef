Add = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a + b;
};

Sub = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a - b;
};

Mul = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a * b;
};

Div = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a / b;
};

OneMinus = kernel <linear> (in a, out b <in.a.actual>) {
	b = 1 - a;
};

TangentToWorld = kernel (
	in normal <type float3 + basis world + use normal + unit true>,
	in tangent <type float3 + basis world + use tangent + unit true>,
	in bitangent <type float3 + basis world + use bitangent + unit true>,
	in input <type float3 + use normal + unit true>,
	out output <in.input.actual + type float3 + basis world>
) {
	output = input.z * normal + input.x * tangent - input.y * bitangent;
};

ComputeToEye = kernel (
	in position <type float3 + basis world + use position>,
	out toEye <type float3 + basis world + use toEye>
) {
	toEye = eyePosition - position;
};

Reflect = kernel (
	in input <type float3>,
	in normal <type float3 + use normal>,
	out output <type float3 + use reflection>
) {
	output = reflect(input, normal);
};

Fresnel = kernel (
	in normal <type float3 + use normal + basis world + unit true>,
	in toEye <type float3 + use toEye + basis world + unit true>,
	out output <type float + use fresnel>
) {
	const float R0 = 0.3;
	output = saturate(dot(normal, toEye).x);
	output = pow(1.0f - output, 5.0f);
	output *= (1.0f - R0);
	output += R0;
};


Tex2D = kernel (
	in texture <type sampler2D>,
	in uv <type float2 + use uv>,
	out sample <in.texture.actual + type float4>
) {
	sample = tex2D(texture, uv);
};

SampleImage = kernel (
	in image <type Image>,
	in uv <type float2 + use uv>,
	out sample <use color + in.image.actual + type float4>
) {
	sample = image.sample(uv);
};

SamplerToImage = kernel (
	in sampler <type sampler2D>,
	out image <in.sampler.actual + type Image>
) {
	struct SamplerToImage_Image : Image {
		sampler2D sampler;
		float4 sample(float2 uv) {
			return tex2D(sampler, uv);
		}
	};

	SamplerToImage_Image res;
	res.sampler = sampler;
	image = res;
};

ErrorMaterial = kernel Material {
	out_albedo = float4(1, 0, 1, 0);
	out_specular = float4(1, 0, 1, 0);
	out_normal = normal;
};

ErrorMaterial = material ErrorMaterial {};
