Add = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a + b;
};

Sub = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a - b;
};

Mul = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a * b;
};

Div = kernel <linear> (in a, in b,	out c <in.a.actual>) {
	c = a / b;
};

OneMinus = kernel <linear> (in a, out b <in.a.actual>) {
	b = 1 - a;
};

Tex2D = kernel (
	in texture <type sampler2D>,
	in uv <type float2 + use uv>,
	out sample <in.texture.actual + type float4>
) {
	sample = tex2D(texture, uv);
};

SampleImage = kernel (
	in image <type Image>,
	in uv <type float2 + use uv>,
	out sample <use color + in.image.actual + type float4>
) {
	sample = image.sample(uv);
};

SamplerToImage = kernel (
	in sampler <type sampler2D>,
	out image <in.sampler.actual + type Image>
) {
	struct SamplerToImage_Image : Image {
		sampler2D sampler;
		float4 sample(float2 uv) {
			return tex2D(sampler, uv);
		}
	};

	SamplerToImage_Image res;
	res.sampler = sampler;
	image = res;
};
