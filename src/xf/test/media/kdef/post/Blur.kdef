BlurImage3 = kernel(
	in uv <type float2>,
	in offset <type float2>,
	in img <type Image>,
	out sample <type float4 + use color>
) {
	float4 res = 0;

	res += img.sample(uv - offset * -8.28173770009) * 0.00544707977256;
	res += img.sample(uv - offset * -6.32835890897) * 0.0272087973966;
	res += img.sample(uv - offset * -4.37862071695) * 0.088432356993;
	res += img.sample(uv - offset * -2.4316263701) * 0.187153619337;
	res += img.sample(uv - offset * -0.486242696427) * 0.258044190174;
	res += img.sample(uv - offset * 1.45881106473) * 0.231845284799;
	res += img.sample(uv - offset * 3.40484670683) * 0.135730471952;
	res += img.sample(uv - offset * 5.35308446592) * 0.0517568687753;
	res += img.sample(uv - offset * 7.30454803182) * 0.0128466830729;
	res += img.sample(uv - offset * 9.0) * 0.00153464772732;

	sample = res;
};


BlurImage4 = kernel(
	in uv <type float2>,
	in offset <type float2>,
	in img <type Image>,
	out sample <type float4 + use color>
) {
	float4 res = 0;

	res += img.sample(uv - offset * -11.3284848158) * 0.00344955654999;
	res += img.sample(uv - offset * -9.35647839838) * 0.0124830535863;
	res += img.sample(uv - offset * -7.38548701365) * 0.0353508285286;
	res += img.sample(uv - offset * -5.41533177608) * 0.0783525525245;
	res += img.sample(uv - offset * -3.44581018937) * 0.135932707143;
	res += img.sample(uv - offset * -1.47670118166) * 0.184604482231;
	res += img.sample(uv - offset * 0.49222872994) * 0.196256946284;
	res += img.sample(uv - offset * 2.4612184935) * 0.163333696051;
	res += img.sample(uv - offset * 4.43050522546) * 0.106410433636;
	res += img.sample(uv - offset * 6.4003170319) * 0.0542658480096;
	res += img.sample(uv - offset * 8.37086640381) * 0.0216603999566;
	res += img.sample(uv - offset * 10.3423445803) * 0.00676636855144;
	res += img.sample(uv - offset * 12.0) * 0.00113312694789;

	sample = res;
};


BlurImage4ds = kernel(
	in uv <type float2>,
	in offset <type float2>,
	in img <type Image>,
	out sample <type float4 + use color>
) {
	float4 res = 0;

	res += img.sample(uv - offset * -10.8353792692) * 0.004872923193;
	res += img.sample(uv - offset * -8.86364193747) * 0.0165852433972;
	res += img.sample(uv - offset * -6.89287735618) * 0.0441763364198;
	res += img.sample(uv - offset * -4.92290033672) * 0.0920966949571;
	res += img.sample(uv - offset * -2.9535032178) * 0.150288031831;
	res += img.sample(uv - offset * -0.984461209649) * 0.191980770202;
	res += img.sample(uv - offset * 0.984461209649) * 0.191980770202;
	res += img.sample(uv - offset * 2.9535032178) * 0.150288031831;
	res += img.sample(uv - offset * 4.92290033672) * 0.0920966949571;
	res += img.sample(uv - offset * 6.89287735618) * 0.0441763364198;
	res += img.sample(uv - offset * 8.86364193747) * 0.0165852433972;
	res += img.sample(uv - offset * 10.8353792692) * 0.004872923193;

	sample = res;
};


Blur4 = graph {
	n0 = node {
		type = input;
		params = (
			input <type Image>,
			inputSize <type float2>
		);
	};

	blurOffComp = node {
		type = kernel;
		kernel = kernel(
			in imgSize <type float2>,
			out blurOff1 <type float2>,
			out blurOff2 <type float2>
		) {
			blurOff1 = float2(1.0 / imgSize.x, 0.0);
			blurOff2 = float2(0.0, 1.0 / imgSize.y);
		};
	};

	ns = node {
		type = kernel;
		kernel = SampleImage;
	};

	n1 = node {
		type = kernel;
		kernel = BlurImage4;
	};

	nb = node {
		type = kernel;
		kernel = Blit;
	};

	n11 = node {
		type = kernel;
		kernel = BlurImage4;
	};

	nb2 = node {
		type = kernel;
		kernel = Blit;
	};

	n2 = node {
		type = output;
		params = (
			output <type Image>,
			outputSize <type float2>
		);
	};

	connect n0.inputSize blurOffComp.imgSize;
	connect n0.input ns.image;
	connect ns.sample n1.img;
	connect n1.sample nb.input;
	connect nb.output n11.img;
	connect n11.sample nb2.input;
	connect nb2.output n2.output;
	noauto n1.uv;
	noauto n11.uv;
	noauto ns.uv;

	connect blurOffComp.blurOff1 n1.offset;
	connect blurOffComp.blurOff2 n11.offset;
	connect nb2.size n2.outputSize;
};


Blur3 = graph {
	n0 = node {
		type = input;
		params = (
			input <type Image>,
			inputSize <type float2>
		);
	};

	blurOffComp = node {
		type = kernel;
		kernel = kernel(
			in imgSize <type float2>,
			out blurOff1 <type float2>,
			out blurOff2 <type float2>
		) {
			blurOff1 = float2(1.0 / imgSize.x, 0.0);
			blurOff2 = float2(0.0, 1.0 / imgSize.y);
		};
	};

	ns = node {
		type = kernel;
		kernel = SampleImage;
	};

	n1 = node {
		type = kernel;
		kernel = BlurImage3;
	};

	nb = node {
		type = kernel;
		kernel = Blit;
	};

	n11 = node {
		type = kernel;
		kernel = BlurImage3;
	};

	nb2 = node {
		type = kernel;
		kernel = Blit;
	};

	n2 = node {
		type = output;
		params = (
			output <type Image>,
			outputSize <type float2>
		);
	};

	connect n0.inputSize blurOffComp.imgSize;
	connect n0.input ns.image;
	connect ns.sample n1.img;
	connect n1.sample nb.input;
	connect nb.output n11.img;
	connect n11.sample nb2.input;
	connect nb2.output n2.output;
	noauto n1.uv;
	noauto n11.uv;
	noauto ns.uv;

	connect blurOffComp.blurOff1 n1.offset;
	connect blurOffComp.blurOff2 n11.offset;
	connect nb2.size n2.outputSize;
};


BlurAndDownsample = graph {
	n0 = node {
		type = input;
		params = (
			input <type Image>,
			inputSize <type float2>
		);
	};

	blurOffComp = node {
		type = kernel;
		kernel = kernel(
			in imgSize <type float2>,
			out blurOff1 <type float2>,
			out blurOff2 <type float2>
		) {
			blurOff1 = float2(1.0 / imgSize.x, 0.0);
			blurOff2 = float2(0.0, 1.0 / imgSize.y);
		};
	};

	ns = node {
		type = kernel;
		kernel = SampleImage;
	};

	n1 = node {
		type = kernel;
		kernel = BlurImage4ds;
	};

	nb = node {
		type = kernel;
		kernel = Blit;
		resample = 0.5 1.0;
	};

	n11 = node {
		type = kernel;
		kernel = BlurImage4ds;
	};

	nb2 = node {
		type = kernel;
		kernel = Blit;
		resample = 1.0 0.5;
	};

	n2 = node {
		type = output;
		params = (
			output <type Image>,
			outputSize <type float2>
		);
	};

	connect n0.inputSize blurOffComp.imgSize;
	connect n0.input ns.image;
	connect ns.sample n1.img;
	connect n1.sample nb.input;
	connect nb.output n11.img;
	connect n11.sample nb2.input;
	connect nb2.output n2.output;
	noauto n1.uv;
	noauto n11.uv;
	noauto ns.uv;

	connect blurOffComp.blurOff1 n1.offset;
	connect blurOffComp.blurOff2 n11.offset;
	connect nb2.size n2.outputSize;
};

