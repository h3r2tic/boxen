Structure = kernel {
	quark main(
		in inPos <type vec3 + basis world>,
		out outPos <in.inPos.actual>
	);
};

Lighting = kernel {
	quark main(
		in position <type vec3 + basis world>,
		out radiance <type vec4>
	);
};

Surface = kernel {
	quark main(
		in radiance <type vec4>,
		in position <type vec3 + basis world>,
		out color <type vec4 + use color>
	);
};

RenderStuff = kernel {
	quark main(
		in pos <type vec3 + basis world>,
		out color <type vec4 + use color>
	);
};


implement Structure(100)
quark StructureDefault {
	quark main(
		in inPos <type vec3 + basis world>,
		out outPos <in.inPos.actual>
	) Cg {
		// code
	}
}

implement Lighting(100)
quark LightingDefault {
	quark main(
		in position <type vec3 + basis world>,
		out radiance <type vec4>
	) Cg {
		// code
	}
}

implement Surface(100)
quark DefaultSurface {
	quark main(
		in radiance <type vec4>,
		in position <type vec3 + basis world>,
		out color <type vec4 + use color>
	) Cg {
		// code
	}
}


implement RenderStuff(100)
graph default {
node_0 = node {
	type = "input";
	params = (
		out pos<type vec3 + basis model>
	);
};
node_1 = node {
	type = "kernel";
	kernelName = "Structure";
	funcName = "main";
};
node_2 = node {
	type = "kernel";
	kernelName = "Lighting";
	funcName = "main";
};
node_3 = node {
	type = "kernel";
	kernelName = "Surface";
	funcName = "main";
};
node_4 = node {
	type = "output";
	params = (
		in color<type vec4 + use color>
	);
};

connect node_0 node_1;
connect node_1 node_2;
connect node_1 node_3;
connect node_2 node_3;
connect node_3 node_4;
}


use = trait {
	color,
	position
};

unit = trait {
	true,
	false
} = false;

converter(20) normalizer(in a <type vec3>, out b <type vec3 + unit true>)
D {
	b = a.normalized;
}


converter(20) model2world(
	in a <type vec3 + basis model>,
	out b <in.a.actual + basis world>
) Cg {
	b = a;		// TODO
}
