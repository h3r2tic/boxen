CheckerGen = kernel Image(
	in size <type float2>
) {
	float2 meh = step(float2(0.5, 0.5), frac(uv * size)) * 2 - 1;
	sample = (meh.x * meh.y) * 0.5 + 0.5;
};


DefaultMeshStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type float3 + basis model + use position>,
			normal <type float3 + basis model + use normal>,
			tangent <type float3 + basis model + use tangent>,
			bitangent <type float3 + basis model + use bitangent>,
			texCoord <type float2 + use uv>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = Rasterize;
	};
	node_2 = node {
		type = output;
	};

	connect node_0 node_1;
	connect node_0 node_2;
};


DefaultPointCloudStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type float3 + basis model + use position>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = kernel <gsin.POINT gsout.TRIANGLE> GeometryShader(
			in inPos <type float3 + use position + basis view>,
			out position <type float3 + basis view + use position>,
			out normal <type float3 + basis view + use normal>,
			out tangent <type float3 + basis view + use tangent>,
			out bitangent <type float3 + basis view + use bitangent>,
			out texCoord <type float2 + use uv>
		) {
			const float psize = 0.1f;

			normal = float3(0, 0, 1);
			tangent = float3(1, 0, 0);
			bitangent = float3(0, 1, 0);

			int i = 0; {
				position = inPos[i] + float3(-psize, psize, 0);
				clipSpacePosition = mul(viewToClip, float4(position, 1.0));
				texCoord = float2(0, 1);
				emitVertex(i);

				position = inPos[i] + float3(-psize,-psize, 0);
				clipSpacePosition = mul(viewToClip, float4(position, 1.0));
				texCoord = float2(0, 0);
				emitVertex(i);

				position = inPos[i] + float3( psize, psize, 0);
				clipSpacePosition = mul(viewToClip, float4(position, 1.0));
				texCoord = float2(1, 1);
				emitVertex(i);

				position = inPos[i] + float3( psize,-psize, 0);
				clipSpacePosition = mul(viewToClip, float4(position, 1.0));
				texCoord = float2(1, 0);
				emitVertex(i);

				restartStrip();
			}
		};
	};
	node_2 = node {
		type = output;
		params = (
			position <type float3 + basis view + use position>,
			normal <type float3 + basis view + use normal>,
			tangent <type float3 + basis view + use tangent>,
			bitangent <type float3 + basis view + use bitangent>
		);
	};

	connect node_0 node_1;
	connect node_1 node_2;
};



//TestSurface1 = surface Lambert {};

/+TestSurface1 = surface CookTorrance {
	fresnelR0 = 0.18;
	roughness = 0.3;
};+/

/+TestSurface1 = surface ABg {
	BRDF_A = 0.1;
	BRDF_B = 0.001;
	BRDF_g = 1.3;
};+/

TestSurface1 = surface ABC_approx {
	BRDF_A = 1;
	BRDF_B = 32.0;
	BRDF_C = 0.92;
};

ParticleSurface = surface Uniform {};

/+TestSurface1 = surface HenyeyGreenstein {
	roughness = 0.5;
};+/

/+TestSurface1 = surface ABC {
	BRDF_A = 1;
	BRDF_B = 7000.0;
	BRDF_C = 0.7;
};+/

TestSurface4 = surface HalfLambert {
};

TestSurface2 = surface ABg_h {
	BRDF_A = 0.0025;
	BRDF_B = 0.0001;
	BRDF_g = 1.8;
};

TestSurface3 = surface ABg_h {
	BRDF_A = 0.06;
	BRDF_B = 0.001;
	BRDF_g = 1.3;
};

/+TestSurface3 = surface ABC {
	BRDF_A = 1;
	BRDF_B = 33333;
	BRDF_C = 0.37;
};+/

/+TestSurface1 = surface ABg_h {
	BRDF_A = 0.0025;
	BRDF_B = 0.0001;
	BRDF_g = 1.8;
};

TestSurface4 = surface ABg_h {
	BRDF_A = 0.06;
	BRDF_B = 0.001;
	BRDF_g = 1.3;
};+/


TestMaterialImpl = material TestMaterial {
	albedoTint = 1 1 1 1;
	albedoTex = sampler {
		texture = "img/testgrid.png";
		minFilter = mipmapLinear;
		magFilter = linear;
	};
};


TestParticleMaterial = material TestParticleMaterial {
	albedoTint = 1 1 1 1;
	albedoTex = sampler {
		texture = "img/spotlight.dds";
		minFilter = mipmapLinear;
		magFilter = linear;
	};
};



TestMaterial = graph Material {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			albedoTint <type float4 + use color> = 1 1 1 1,
			albedoTex <type sampler2D + use color>,
			blurOffset <type float2> = 0.002 0.002,
			checkerSize <type float2> = 5 5
		);
	};
	ng = node {
		type = kernel;
		kernel = CheckerGen;
	};
	ns = node {
		type = kernel;
		kernel = Tex2D;		
	};
	nb = node {
		type = kernel;
		kernel = BlurImage4;
	};
	na = node {
		type = kernel;
		kernel = Add;
	};
	n2 = node {
		type = kernel;
		kernel = kernel Material(
			albedoTint <type float4 + use color>,
			someImg <type Image>
		) {
			out_albedo = albedoTint * someImg.sample(texCoord);
//			out_albedo.yzw = 0;
			out_specular = float4(1);
			out_normal = normal;
		};
	};
	n3 = node {
		type = output;
	};

	// ----

	connect n1.checkerSize ng.size;
	connect n1.blurOffset nb.offset;

	connect n1 ns;

	connect ng.sample na.a;			// procedural tex -> sum
	connect ns.sample na.b;			// albedo tex -> sum

	//connect ng.sample nb.img;		// procedural tex -> blur
	//connect ns.sample nb.img;		// albedo tex -> blur
	connect na.c nb.img;			// sum -> blur

	connect nb.sample n2.someImg;	// blur -> out

	//connect nb.sample n2.someImg;	// albedo tex -> out
	//connect ng.sample n2.someImg;	// procedural tex -> out

	// ----

	noauto nb.uv;
	noauto ng.uv;
	noauto ns.uv;

	// ----

	connect n0 n2;
	connect n1.albedoTint n2.albedoTint;
	connect n2.out_albedo n3.out_albedo;
	connect n2.out_specular n3.out_specular;
	connect n2 n3;
};


TestParticleMaterial = graph Material {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			albedoTint <type float4 + use color> = 1 1 1 1,
			albedoTex <type sampler2D + use color>,
		);
	};
	ns = node {
		type = kernel;
		kernel = Tex2D;		
	};
	nm = node {
		type = kernel;
		kernel = Mul;
	};
	n2 = node {
		type = kernel;
		kernel = kernel Material(
			albedoImg <type Image>
		) {
			float2 offCenter = texCoord.xy - 0.5f;
			if (dot(offCenter, offCenter) > 0.25f) discard;
			out_albedo = 0.025 * albedoImg.sample(texCoord);
			out_specular = 0;
			out_normal = normal;
		};
	};
	n3 = node {
		type = output;
	};

	// ----

	connect n1 ns;
	connect ns.sample nm.a;
	connect n1.albedoTint nm.b;
	connect nm.c n2.albedoImg;
	noauto ns.uv;

	connect n0 n2;
	connect n2.out_albedo n3.out_albedo;
	connect n2.out_specular n3.out_specular;
	connect n2 n3;
};

/+
TestParticleMaterial = graph Material {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			albedoTint <type float4 + use color> = 1 1 1 1,
			albedoTex <type sampler2D + use color>,
		);
	};
	ns = node {
		type = kernel;
		kernel = Tex2D;		
	};
	nm = node {
		type = kernel;
		kernel = Mul;
	};
	n2 = node {
		type = kernel;
		kernel = kernel Material(
			albedoImg <type Image>
		) {
			float2 oc = texCoord.xy - 0.5f;
			if (dot(oc, oc) > 0.249f) discard;
			out_albedo = 1;
			out_specular = 0;
			oc *= 2;
			out_normal = tangent * oc.x + bitangent * oc.y + normal * sqrt(1.0 - dot(oc, oc));
		};
	};
	n3 = node {
		type = output;
	};

	// ----

	connect n1 ns;
	connect ns.sample nm.a;
	connect n1.albedoTint nm.b;
	connect nm.c n2.albedoImg;
	noauto ns.uv;

	connect n0 n2;
	connect n2.out_albedo n3.out_albedo;
	connect n2.out_specular n3.out_specular;
	connect n2 n3;
};
+/


SpecularOnly = kernel Material {
	out_specular = float4(1);
	out_diffuse = float4(0);
	out_normal = normal;
};


TestPost = graph PostProcess {
	input = node {
		type = input;
	};

	data = node {
		type = data;
		params = (
			randSampler <type sampler2D + use color> = sampler {
				texture = "img/random.bmp";
				minFilter = nearest;
				magFilter = nearest;
			},
			distortSampler <type sampler2D + use color> = sampler {
				texture = "img/noise.jpg";
				minFilter = linear;
				magFilter = linear;
			}
		);
	};

	clampInput = node {
		type = kernel;
		kernel = kernel(
			in input <type float4 + use color>,
			out output <type float4 + use color>
		) {
			output = min(input, float4(16));
		};
	};

	blur1 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur2 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur3 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur4 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur5 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur6 = node {
		type = kernel;
		kernel = BlurAndDownsample;
	};

	blur7 = node {
		type = kernel;
		kernel = Blur4;
	};

	blur8 = node {
		type = kernel;
		kernel = Blur4;
	};

	blur9 = node {
		type = kernel;
		kernel = Blur4;
	};

	blur10 = node {
		type = kernel;
		kernel = Blur4;
	};

	sampleOrig = node {
		type = kernel;
		kernel = SampleImage;
	};

	sampleBlurred = node {
		type = kernel;
		kernel = SampleImage;
	};

	sampleBlurred2 = node {
		type = kernel;
		kernel = SampleImage;
	};

	sampleBlurred3 = node {
		type = kernel;
		kernel = SampleImage;
	};

	sampleBlurred4 = node {
		type = kernel;
		kernel = SampleImage;
	};

	output = node {
		type = output;
	};

	glare = node {
		type = kernel;
		kernel = AddGlare;
	};

	noise = node {
		type = kernel;
		kernel = AddNoise;
	};

	distort = node {
		type = kernel;
		kernel = kernel(
			in baseColor <type Image>,
			in distortSampler <type sampler2D + use color>,
			in uv <type float2 + use uv>,
			out output <type float4 + use color>
		) {
			float2 off = cos(tex2D(distortSampler, uv * 3 + time.minute).xy * 27.123 + radians(time.second * 360)) * 0.005;
			float2 meh = smoothstep(1, 0.9, saturate(2 * abs(uv - float2(0.5))));
			output = baseColor.sample(saturate(uv + off * meh));
		};
	};

//	connect input blur1;
	connect sampleOrig.sample clampInput.input;
	connect clampInput.output distort.baseColor;
	connect distort.output blur1.input;
	connect input.size blur1.inputSize;
	connect data.randSampler noise.noiseSampler;
	connect data.distortSampler distort.distortSampler;

	connect blur1 blur2;
	connect blur2 blur3;
	connect blur3 blur4;
	connect blur4 blur5;
	connect blur5 blur6;
	connect blur6 blur7;
	connect blur7 blur8;
	connect blur8 blur9;
	connect blur9 blur10;

	connect blur1 sampleBlurred;
	connect blur2 sampleBlurred2;
	connect blur3 sampleBlurred3;
	connect blur9 sampleBlurred4;
	connect input sampleOrig;

	connect distort.output glare.baseColor;
	connect sampleBlurred.sample glare.blurredColor;
	connect sampleBlurred2.sample glare.blurredColor2;
	connect sampleBlurred3.sample glare.blurredColor3;
	connect sampleBlurred4.sample glare.blurredColor4;

	connect glare.output noise.baseColor;
	connect noise.output output.output;

	noauto sampleOrig.uv;
	noauto sampleBlurred.uv;
	noauto sampleBlurred2.uv;
	noauto sampleBlurred3.uv;
	noauto sampleBlurred4.uv;
	noauto noise.uv;
	noauto distort.uv;
};


TestPostNop = graph {
	n0 = node {
		type = input;
		params = (
			input <type Image>
		);
	};

	n1 = node {
		type = kernel;
		kernel = SampleImage;
	};

	n2 = node {
		type = output;
		params = (
			output <type Image>
		);
	};


	connect n0.input n1.image;
	connect n1.sample n2.output;
	noauto n1.uv;
};

