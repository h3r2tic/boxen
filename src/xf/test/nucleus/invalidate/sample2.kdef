Structure = kernel(
	out outPosition <type vec3 + basis model + use position>,
	out outNormal <type vec3 + basis model + use normal>
);

Light = kernel(
	in position <type vec3 + use position + basis world>,
	out intensity <type vec4 + use color>,
	out toLight <type vec3 + basis world + use toLight>
);

Illumination = kernel(
	in normal <type vec3 + use normal + basis world>,
	in intensity <type vec4 + use color>,
	in toLight <type vec3 + basis world + use toLight>,
	out diffuse <type vec4 + use diffuse>,
	out specular <type vec4 + use specular>
);

Pigment = kernel(
	in position <type vec3 + basis model + use position>,
	in normal <type vec3 + basis model + use normal>,
	in diffuse <type vec4 + use diffuse>,
	in specular <type vec4 + use specular>,
	out radiance <type vec4 + use color>
);


// differs
Rasterize = kernel(
	in inPos <type vec4 + use position + basis world>
);


// ----


DefaultMeshStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type vec3 + basis model + use position>,
			normal <type vec3 + basis model + use normal>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = Rasterize;
	};
	node_2 = node {
		type = output;
	};

	connect node_0 node_1;
	connect node_0 node_2;
};


// ----


use = trait {
	color,
	position,
	normal
};

unit = trait {
	true,
	false
} = false;

basis = trait {
	model,
	world,
	view,
	clip
};


// ----


// differs
Add = kernel(in a, in b,	out c <in.a.actual>) {
	c = a
	 + b;
};


// ----


TestLight = kernel Light {
	vec3 lightPos = vec3(1, 2, 2);
	toLight = lightPos - position;
	intensity = float4(1.0f, 1.0f, 1.0f, 1.0f) / dot(toLight, toLight).xxxx;
	toLight = normalize(toLight);
};

BlinnPhong = kernel Illumination {
	float NdotL = dot(normal, toLight).x;
	diffuse = intensity * saturate(NdotL);
	specular = 0;
};


TestPigment = kernel Pigment {
	radiance = diffuse + specular;
};


// ----


converter(20) normalizer(in a <type vec3>, out b <type vec3 + unit true>) {
	b = normalize(a);
}

converter(20) normal2color(
	in a <type vec3 + use normal>,
	out b <type vec4 + use color>
) {
	b = float4((a + 1.0f) * 0.5f, 1.0f);
}


// differs
converter(20) model2world_p(
	in a <type vec3 + basis model + use position>,
	out x <in.a.actual + basis world>
) {
	x = mul(modelToWorld, float4(a, 1)).xyz;
}

converter(20) model2world_n(
	in a <type vec3 + basis model + use normal>,
	out b <in.a.actual + basis world>
) {
	b = mul(modelToWorld, float4(a, 0)).xyz;
}

// differs
converter(10) world2view(
	in a <type vec3 + basis world + use position>,
	out b <in.a.actual + basis view>
) {
	b = mul(worldToView, float4(a, 1.0));
}

converter(20) view2clip(
	in a <type vec3 + basis view + use position>,
	out b <in.a.actual + basis clip + type vec4>
) {
	b = mul(viewToClip, float4(a, 1.0));
}

