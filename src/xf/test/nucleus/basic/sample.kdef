DefaultMeshStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type vec3 + basis model + use position>,
			normal <type vec3 + basis model + use normal>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = Rasterize;
	};
	node_2 = node {
		type = output;
	};

	connect node_0 node_1;
	connect node_0 node_2;
};


TestSurface1 = surface CookTorrance {
	roughness = 0.05;
};

TestSurface2 = surface CookTorrance {
	roughness = 0.3;
};

TestSurface3 = surface CookTorrance {
	roughness = 0.7;
};

TestSurface4 = surface CookTorrance {
	roughness = 0.95;
};


/+TestMat = material TestPigment {
	albedo = 1 0 0 1;
};+/


TestLight = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type vec3 + use lightPos> = 0 1 -2,
			lumIntens <type vec4 + use lumIntens> = 1 1 1 1
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			lightPos <type vec3 + use lightPos>,
			lumIntens <type vec4 + use lumIntens>
		) {
			toLight = lightPos - position;
			intensity = lumIntens / dot(toLight, toLight).xxxx;
			toLight = normalize(toLight);
		};
	};
	n3 = node {
		type = output;
	};

	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};


TestPigment = kernel Pigment {
	radiance = diffuse + specular;
};

SpecularOnly = kernel Pigment {
	radiance = specular;
};
