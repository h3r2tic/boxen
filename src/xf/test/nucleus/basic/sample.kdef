DefaultMeshStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type vec3 + basis model + use position>,
			normal <type vec3 + basis model + use normal>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = Rasterize;
	};
	node_2 = node {
		type = output;
	};

	connect node_0 node_1;
	connect node_0 node_2;
};


TestSurface1 = surface CookTorrance {
	roughness = 0.1;
};

TestSurface2 = surface BlinnPhong {
	//roughness = 0.3;
	specularPower = 60;
};

TestSurface3 = surface AshikhminShirley {
	roughness = 0.7;
};

TestSurface4 = surface CookTorrance {
	roughness = 0.95;
};


TestMaterial = material TestPigmentNestNest {
	//albedoTint = 1 1 1 1;
};


TestLight = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type vec3 + use lightPos> = 0 1 -2,
			lumIntens <type vec4 + use lumIntens> = 1 1 1 1
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			lightPos <type vec3 + use lightPos>,
			lumIntens <type vec4 + use lumIntens>
		) {
			toLight = lightPos - position;
			intensity = lumIntens / dot(toLight, toLight).xxxx;
			toLight = normalize(toLight);
		};
	};
	n3 = node {
		type = output;
	};

	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};



/*
 * Messy in order to test graph flattening
 */

TestPigment = graph Pigment {
	n0 = node {
		type = input;
		params = (
			albedoTint <type vec4 + use color>
		);
	};
	n1 = node {
		type = kernel;
		kernel = kernel Pigment(
			albedoTint <type vec4 + use color>
		) {
			radiance = (diffuse + specular) * albedoTint;
		};
	};
	n2 = node {
		type = output;
	};

	connect n0 n1;
	connect n0.albedoTint n1.albedoTint;
	connect n1 n2;
};


TestPigmentNest = graph Pigment {
	n0 = node {
		type = input;
		params = (
			albedoTint <type vec4 + use color>
		);
	};
	n1 = node {
		type = kernel;
		kernel = TestPigment;
	};
	n2 = node {
		type = output;
	};

	connect n0 n1;
	connect n0.albedoTint n1.albedoTint;
	connect n1 n2;
};


TestPigmentNestNest = graph Pigment {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			albedoTint <type vec4 + use color> = 1 1 1 1
		);
	};
	n2 = node {
		type = kernel;
		kernel = TestPigmentNest;
	};
	n3 = node {
		type = output;
	};

	connect n0 n2;
	connect n1.albedoTint n2.albedoTint;
	connect n2 n3;
};


SpecularOnly = kernel Pigment {
	radiance = specular;
};
