DefaultMeshStructure = graph Structure {
	node_0 = node {
		type = input;
		params = (
			position <type float3 + basis model + use position>,
			normal <type float3 + basis model + use normal>,
			texCoord <type float2 + use texCoord>
		);
	};
	node_1 = node {
		type = kernel;
		kernel = Rasterize;
	};
	node_2 = node {
		type = output;
	};

	connect node_0 node_1;
	connect node_0 node_2;
};


TestSurface1 = surface CookTorrance {
	roughness = 0.1;
};

TestSurface2 = surface BlinnPhong {
	//roughness = 0.3;
	specularPower = 60;
};

TestSurface3 = surface AshikhminShirley {
	roughness = 0.7;
};

TestSurface4 = surface CookTorrance {
	roughness = 0.95;
};


TestMaterial = material TestPigment {
	albedoTint = 1 1 1 1;
	albedoTex = sampler {
		texture = "../../media/img/testgrid.png";
		minFilter = mipmapLinear;
		magFilter = linear;
	};
};


TestLight = graph Light {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			lightPos <type float3 + use lightPos> = 0 1 -2,
			lumIntens <type float4 + use lumIntens> = 1 1 1 1
		);
	};
	n2 = node {
		type = kernel;
		kernel = kernel Light(
			lightPos <type float3 + use lightPos>,
			lumIntens <type float4 + use lumIntens>
		) {
			toLight = lightPos - position;
			intensity = lumIntens / dot(toLight, toLight).xxxx;
			toLight = normalize(toLight);
		};
	};
	n3 = node {
		type = output;
	};

	connect n0 n2;
	connect n1 n2;
	connect n2 n3;
};


TestPigment = graph Pigment {
	n0 = node {
		type = input;
	};
	n1 = node {
		type = data;
		params = (
			albedoTint <type float4 + use color> = 1 1 1 1,
			albedoTex <type sampler2D + use color>
		);
	};
	nt = node {
		type = kernel;
		kernel = Tex2D;
	};
	n2 = node {
		type = kernel;
		kernel = kernel Pigment(
			albedoTint <type float4 + use color>,
			albedoTexColor <type float4 + use color>
		) {
			radiance = diffuse * albedoTint * albedoTexColor + specular;
			/+float lum = dot(radiance.xyz, float3(0.2126, 0.7152, 0.0722));
			float lum2 = lum;
			lum2 *= 2.0;
			lum2 += 0.33;
			lum2 = pow(lum2, 1/0.35);
			radiance *= lum2 / max(0.01, lum);+/
		};
	};
	n3 = node {
		type = output;
	};

	connect n0 n2;
	connect n1.albedoTint n2.albedoTint;
	connect n1 nt;
	connect n0.texCoord nt.texCoord;
	connect nt.color n2.albedoTexColor;
	connect n2 n3;
};


SpecularOnly = kernel Pigment {
	radiance = specular;
};
