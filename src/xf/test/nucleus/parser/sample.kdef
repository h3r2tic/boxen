implement Transparent(50), Lul(10)
quark TransparentLul {
	D {
		void somefunc() {
			++i;
			--j;
			case poop:
				break;
		}
	}
	
	quark zomg(in int foo, out char[] bar, out vec3 baz)
	D {
		int x;
		++x;
		throw new Exception("lololol");
		`omg heh`
	}
}


implement Poop(10)
quark ConcretePoop {
	Cg {
		...
	}
}


BasicExtrudedParticleSystem = kernel Something, SomethingElse {
	after Poop;
	before Omg;
	
	quark zomg(
		in int foo <
			heh "lol"
		+	blah 123
		+	maxValue 10
		>,
		out char[] bar <
			meh 1.23
		+	blah 1 2 3
		> = 123.456,
		out vec3 baz
	);
};


Poop = kernel {
	attribs = (
		kernel heh <super blah>,
		kernel zomg <super lol>
	);
};


Omg = kernel {
};


Something = kernel {
};


SomethingElse = kernel {
};


converter(20) normalizer(in vec3 a, out vec3 b <unit true>)
D {
	b = a.normalized;
}


converter(10) (
	in vec3 a <basis object>,
	out vec3 b <basis world>
) Cg {
	b = mul(context.someMat, a);
}


implement BasicExtrudedParticleSystem(100)
graph {
	/+import "foo/bar.baz" : SomeGraph.Blah;
	//import "zomg" : *;
	import "zomg" : poop.*;+/

	SomeNode = graph {
		foo = node {
			type = "lol";
		};
	};

	SomeNode.foo.zomg = 3.14159;

	dupa = node {
		type = "kernel";
		kernelName = "BasicExtrudedParticleSystemGPUWrap";
		funcName = "main";
		center = 579.50 520.50;
		size = 343.00 72.00;
		primLevel = "cpu";
		params = (
			int foobar = 0,
			float4x4 blah,
			float3 omg <unit true>
		);
	};
	
	jasia = node {
		type = "kernel";
		kernelName = "BasicExtrudedParticleSystemGPUWrap";
		funcName = "main";
	};

	connect dupa.a jasia.b;
}


zomg = trait {
	Foo,
	Bar,
	Baz
};

blehlol = trait {
	One,
	Two,
	Three
} = One;


implement RenderViewport(100)
graph default {
node_0 = node {
	type = "kernel";
	kernelName = "ClearBuffer";
	funcName = "main";
	center = 251.00 266.00;
	size = 130.00 78.00;
	primLevel = "cpu";
};
node_1 = node {
	type = "input";
	params = (
		out vec3 pos<>,
		out quat rot<>
	);
	center = 133.00 116.00;
	size = 105.00 80.00;
	primLevel = "cpu";
};
node_2 = node {
	type = "kernel";
	kernelName = "DeferredDrawScene";
	funcName = "main";
	center = 512.50 159.00;
	size = 173.00 102.00;
	primLevel = "cpu";
};
node_3 = node {
	type = "kernel";
	kernelName = "Bloom";
	funcName = "main";
	center = 1099.00 366.00;
	size = 105.00 78.00;
	primLevel = "cpu";
};
node_4 = node {
	type = "kernel";
	kernelName = "GetBuffer";
	funcName = "main";
	center = 15.00 268.00;
	size = 121.00 78.00;
	primLevel = "cpu";
};
node_5 = node {
	type = "kernel";
	kernelName = "DisplayBuffer";
	funcName = "main";
	center = 1335.00 266.00;
	size = 141.00 78.00;
	primLevel = "cpu";
};
connect node_0 node_2;

connect node_1 node_2;

connect node_2.outfb node_3.infb;

connect node_3.outfb node_5.infb;

connect node_4 node_0;

}
