rendering game plan:
--------------------

* step 1: low level stuff
	+ read .cgfx files and extract their data
	+ allow array resizing and interface specification
	+ give access to uniforms
	+ give access to varyings
		+ steal VBOs from Heresy/Deadlock for now
	+ per-shader uniforms
	? per-shader-group uniforms
	+ uniform buffers
	+ instancing
	+ mesh struct with a position and whatnot
		+ uses GPUEffectInstance
	+ load up some real meshes using assimp. boxes are boring.
	
	textures
	a few shaders for testing

	~ render lists
		grouping by shader group and then by shader
		+ minimization of state changing
		
	render states for rendering operations
		z, blend, stencil
	framebuffers
	queries for monitoring rendering operations
	throw up a bunch of shaders and objects and play around with profiling

* step 2: scene-level management
	whip up some lights along with tracking their influences
	lay foundations for lazy updating of shadow maps
	shadow map prioritization
	shadow map budget
	hierarchical culling structure for the scene
		could be a loose octree or an abt
	terrain
	plug the renderer into Boxen

* step 3: tackling the material-light combinatorial problem
	implement a basic shader snippet composition mechanism
	add support for multiple lights in the forward mode
		multipass
		complex shader generation and caching
		light cuts
	re-animate the shader editor
	pre-pass lighting
 
* step 4: workflow enhancements
	grouping of shader nodes
	kernel templates for real this time
	associating default kernels with asset types

* step 5: bring back cpu-based rendering operations
	add support for cpu quarks
		no lazy eval
		exact resource management
			annotating resource flow might help reduce the ref counting
				albeit not strictly necessary - low frequency ops on the cpu level
	post-processing
	HDR, tone mapping and subtle glare

* step 6: write the fucking thesis

* step 7: profit!
