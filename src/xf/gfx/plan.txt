rendering game plan:
--------------------

* step 1: low level stuff
	+ read .cgfx files and extract their data
	+ allow array resizing and interface specification
	+ give access to uniforms
	+ give access to varyings
		+ steal VBOs from Heresy/Deadlock for now
	+ per-shader uniforms
	? per-shader-group uniforms
	+ uniform buffers
	+ instancing
	+ mesh struct with a position and whatnot
		+ uses EffectInstance
	+ load up some real meshes using assimp. boxes are boring.
	+ textures
		+ FreeImage
	+ debug FPS-style camera
	+ custom scene format, exporter for 3ds max, importer
	+ a few shaders for testing
		+ phong
		+ phong-blinn
		+ strauss
		+ fresnel
		+ cook-torrance
		+ ashikhmin-shirley
		+ diffuse and specular mapping
	+ render lists
		+ grouping
			? shader group
			+ shader
			+ textures
		+ minimization of state changing
	+ render states for rendering operations
		~ z, blend, stencil
	+ framebuffers

	* Boxen takes priority for now
		- queries for monitoring rendering operations
			pixels
			sync fences
			nvPerfKit
			profile!("") in {};
		- throw up a bunch of shaders and objects and play around with profiling

* step 2: scene-level management
	~ terrain
		+ basic rendering with chunked lod

	render graph
		couple asset types with structure shaders
	
	~ culling
		could be a loose octree or an abt... or just a plain array :P
		after doing research into Yann Lombard's ABT, it seems that they are not
		a good fit for what I'm doing, if to anything these days at all.
		Will go with a dumb flat structure for the scene, then if need be,
		roll something like a loose AABB tree / loose k-d Tree, e.g.
		like Regedit's http://regedit.gamedev.pl/news_1282_kd-tree.html
		
	plug the renderer into Boxen

* step 3: tackling the material-light combinatorial problem
	+ implement a basic shader snippet composition mechanism
	~ add support for multiple lights in the forward mode
		- multipass
		+ complex shader generation and caching
		- light cuts
	+ point lights
	- light influence tracking
	re-animate the shader editor
	pre-pass lighting
 
* step 4: workflow enhancements
	grouping of shader nodes
	kernel templates for real this time
	associating default kernels with asset types

* step 5: post-processing
	HDR, tone mapping and subtle glare

* step 6: write the fucking thesis

* step 7: add a 'press start to play' button that disappears into 'just kidding'.

* step 8: profit!
