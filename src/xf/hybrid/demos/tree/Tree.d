module Test;

private {
	import xf.hybrid.Hybrid;
	import xf.hybrid.backend.GL;

	// for Thread.yield
	import tango.core.Thread;

	import tango.io.Stdout;
	import tango.text.convert.Format;
	import Path = tango.io.Path;
}



void main() {
	version (DontMountExtra) {} else gui.vfsMountDir(`../../`);
	scope cfg = loadHybridConfig(`./Tree.cfg`);
	scope renderer = new Renderer;
	
	bool programRunning = true;
	while (programRunning) {
		gui.begin(cfg);
			if (gui().getProperty!(bool)("main.frame.closeClicked")) {
				programRunning = false;
			}
			
			Group(`.main`) [{
				
				// useChildSize will make the ScrollView expand in the X axis
				ScrollView().useChildSize(1) [{
					struct TreeKey {
						char[] path, name;
					}
					
					// The two columns for TreeView, separated by 20 pixels' gap
					HBox().open;
					auto vbox0 = VBox();
					Dummy().userSize = vec2(20, 0);
					auto vbox1 = VBox();
					gui.close;

					TreeView().doGUI(
						// add the first widget generated by the tree view to vbox0, the second to vbox1
						(int row, int col) {
							return cast(IWidget)(0 == col ? vbox0 : vbox1);
						},
						
						// start with the parent directory
						TreeKey(``, `..`),
						
						// entry for the tree view data function
						(TreeKey key, TreeContext ctx) {
							// the first column will contain the file/dir name
							Label().text = key.name;
							
							// ctx.opIndex automatically caches the data
							char[] fullPath = ctx[Path.join(key.path, key.name)];
							
							if (ctx[Path.isFolder(fullPath)]) {
								auto listing = ctx[{
									TreeKey[] paths;
									foreach (p; Path.children(fullPath)) {
										paths ~= TreeKey(p.path.dup, p.name.dup);
									}
									return paths;
								}()];

								// the second column will contain the number of files in this directory
								Label().text = ctx[Format("{} files", listing.length).dup];

								// recurse the TreeView data generation for each file in the directory
								foreach (l; listing) {
									ctx.recurse(l);
								}
							} else {
								// the second column will contain the number of bytes in this file
								Label().text = ctx[Format("{} bytes", Path.fileSize(fullPath)).dup];
							}
						}
					);
				}].userSize = vec2(0, 300);		// set the height to 300px. The width will be automatic
				
			}];
		gui.end();
		gui.render(renderer);
		Thread.yield();
	}
}
