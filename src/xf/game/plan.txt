+ Revive conections and events
	+ Refactor the old ENet backend
	+ Create components for event reading and writing
	+ Create a dispatcher for network packets into events and states
	+ Encapsulate budget writers
	+ Revive the Event scheduler/queue
	+ Create functioning GameServer and GameClient out of the components
+ NetObj creation and id management
	+ List all net objects somewhere
	+ Implement methods to store all net objects' states
	+ NetObj creation for new players
	+ Revive game object factories
+ Player controllers
	+ Implement basic player controllers: no physics, local sim only
	+ Assignment to players
	+ Rendering
+ NetObj state serialization and propagation ( just server->client for now )
+ Plug Havok for player controllers
+ Debris boxen
+ Linearize the callbacks and update xf.boxen.game.ContactStorage
+ Revive touch trackers / auth groups on top of the ContactStorage
+ Collect the 'process' contact callbacks from Havok from all threads
+ Visualize auth
+ Eliminate memory leaks

- The authority scheme
	+ client->server state propagation
	~ corrections
		+ general-purpose corrections
		- corrections specialized for kinematic actors
	- giving back objects
	~ make sure the game subsystems update order is OK
		*	must send events for a tick before states, so that the authority transfers
			will take place before states are processed
		*	must update physics and objects before events are finalized because the sim
			and objects (character controllers) generate auth transfer events

~ Implement the new time sync algorithm
	+ Revive the old time sync
	- Implement the new one
	- Perform enet servicing in a separate thread to get precise reception times


* Visualize networking memory and id usage
* Revive tanks
* Revive projectiles
* Revive explosions
* Revive the physical part of terrain
* Move to programming the editor
