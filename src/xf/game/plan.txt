+ Revive conections and events
	+ Refactor the old ENet backend
	+ Create components for event reading and writing
	+ Create a dispatcher for network packets into events and states
	+ Encapsulate budget writers
	+ Revive the Event scheduler/queue
	+ Create functioning GameServer and GameClient out of the components
+ NetObj creation and id management
	+ List all net objects somewhere
	+ Implement methods to store all net objects' states
	+ NetObj creation for new players
	+ Revive game object factories
+ Player controllers
	+ Implement basic player controllers: no physics, local sim only
	+ Assignment to players
	+ Rendering
+ NetObj state serialization and propagation ( just server->client for now )
+ Plug Havok for player controllers
+ Debris boxen
+ Linearize the callbacks and update xf.boxen.game.ContactStorage
+ Revive touch trackers / auth groups on top of the ContactStorage
+ Collect the 'process' contact callbacks from Havok from all threads
+ Visualize auth
+ Eliminate memory leaks

- The authority scheme
	+ client->server state propagation
	~ corrections
		+ general-purpose corrections
		- corrections specialized for kinematic actors
	+ giving back objects
	~ make sure the game subsystems update order is OK
		*	must send events for a tick before states, so that the authority transfers
			will take place before states are processed
		*	must update physics and objects before events are finalized because the sim
			and objects (character controllers) generate auth transfer events
		*	auth checking and giving up objects must be done after receiving data from
			the clients and before simulating the next tick or even advancing it, so
			the comparisons of the last stored states are performed against the clients'
			states for that very tick
			
~ Revive tanks
	+ Movement
	- Proper mesh
	- Turret
	- Shooting

* Handle objects going past the boundaries of the Havok world. Right now they cause crashes

* Seems like there's a bug in auth touch tracking as objects long not touched by a player seem to be found as touching
* Also, there's a bug with deactivation where a peer tells another that something should deactivate, while the other peer tells it to activate and the activation/deactivation flickers, because in Havok, deactivation affects the whole island, not just an individual object

* Revive projectiles
* Revive explosions
* Revive the physical part of terrain
* Move to programming the editor

- Visualize networking memory and id usage
-> will wait for Hybrid and graphing

- Implement the new time sync algorithm
-> will wait for Hybrid and graphing
	+ Revive the old time sync
	- Perform enet servicing in a separate thread to get precise reception times
	- Implement the new one
