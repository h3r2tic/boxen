.d-baseclass = "KDefParserBase";
.d-header = "module xf.nucleus.kdef.KDefParser;
private {{
	import xf.nucleus.Value;
	import xf.nucleus.Code;
	import xf.nucleus.Function;
	import xf.nucleus.kdef.Common;
	import xf.nucleus.kdef.KDefParserBase;
	import xf.nucleus.kernel.KernelDef;
	import xf.nucleus.kernel.KernelImplDef;
	
	alias char[] string;
}";
.d-classname = "KDefParser";
.d-filename = "KDefParser.d";


// ----------------------------------------------------------------------------------------------------------------


Syntax
	= void parseSyntax(Statement[] statements)
	::= Statement:~statements* eoi;
	
Statement
	= Statement st
	::= PreprocessStatement:st | ImplementStatement:st | ConnectStatement:st | AssignStatement:st | ImportStatement:st | ConverterDeclStatement:st;

// ----------------------------------------------------------------------------------------------------------------
// Statements
	
ImplementStatement
	= new ImplementStatement(KernelImplDef[] impls, KernelImplementation impl)
	::= "implement" ?!("kernel impl list expected") KernelImpl:~impls*%","
	?!("uh, wanted a kernel implementation") KernelImplementation:impl;
	
	KernelImpl
	= KernelImplDef parseKernelImpl(string name, double score)
	::= Identifier:name "(" Number:score ")";

ConnectStatement
	= new ConnectStatement(string from, string to)
	::= "connect" Identifier:from Identifier:to ";";

AssignStatement
	= new AssignStatement(string name, Value value)
	::= Identifier:name "=" Value:value ?!("';' expected") ";";
	
ImportStatement
	= new ImportStatement(string name, string[] what)
	::= "import" String:name [ ":" WildcardIdentifier:~what* % "," ] ";";
	
	WildcardIdentifier
	= string name
	::= (Identifier "*"):name | Identifier:name;
	
PreprocessStatement
	= new PreprocessStatement(string processor, string processorFunction)
	::= "preprocess" Identifier:processorFunction Identifier:processor ";";
	
ConverterDeclStatement
	= new ConverterDeclStatement(ParamDef[] params, Code code, string name)
	::= "converter" [Identifier:name] ParamList:params Code:code;
	
// ----------------------------------------------------------------------------------------------------------------
// special Values

KernelImplementation
	= KernelImplementation impl
	::= QuarkDefValue:impl | GraphDefValue:impl;
		
QuarkDefValue
	= new QuarkDefValue(char[] name, Code[] inlineCode, Function[] quarkFunctions)
	::= "quark" Identifier:name
	"{"
		(Code:~inlineCode | Function:~quarkFunctions)*
	"}";
	
GraphDefValue
	= new GraphDefValue(GraphDef graphDef, string label)
	::= "graph" [Identifier:label]
	"{"
		GraphDefBody:graphDef
	"}";
	
GraphDefBody
	= new GraphDef(Statement[] statements)
	::= Statement:~statements*;
	
KernelDefValue
	= new KernelDefValue(string domain="any", KernelDef kernelDef, string[] bases)
	::= [("gpu" | "cpu"):domain] "kernel" [KernelInheritList:bases]
	?!("'{' expected") "{"
		KernelDefBody:kernelDef
	?!("'}' expected") "}";
	
GraphDefNodeValue
	= new GraphDefNodeValue(GraphDefNode node)
	::= "node"
	"{"
		GraphDefNodeBody:node
	"}";
	
GraphDefNodeBody
	= new GraphDefNode(VarDef[] variables)
	::= VarDef:~variables*;

TraitDefValue
	= new TraitDefValue(string[] values, string defaultValue)
	::= "trait"
	"{"
		Identifier:~values % ","
	"}"
	[ "=" ?!("default value identifier exptected") Identifier:defaultValue ];


// ----------------------------------------------------------------------------------------------------------------

Code
	= new Code(string language, Atom[] tokens)
	::= ("D" | "Cg"):language "{" OpaqueCodeBlock:tokens "}";


KernelInheritList
	= string[] bases
	::= Identifier:~bases* % ",";

KernelDefBody
	= KernelDef parseKernelDef(AbstractFunction[] funcs, string[] before, string[] after, ParamDef[] attribs)
	$string errSemi = "';' expected"
	$string errIdent = "kernel name expected"
	::= (
		AbstractFunction:~funcs |
		"before" ?!(errIdent) Identifier:~before ?!(errSemi) ";" |
		"after" ?!(errIdent) Identifier:~after ?!(errSemi) ";" |
		"attribs" "=" ParamList:params ";"
	)*;
	
AbstractFunction
	= AbstractFunction createAbstractFunction(string name, ParamDef[] params)
	$string semicolonExpected = "';' expected"
	$string nameExpected = "kernel function name expected"
	::= "quark" ?!(nameExpected) Identifier:name ParamList:params ?!(semicolonExpected) ";";

Function
	= Function createFunction(string name, ParamDef[] params, Code code)
	$string semicolonExpected = "';' expected"
	$string nameExpected = "quark function name expected"
	::=
		"quark" ?!(nameExpected) Identifier:name ParamList:params ?!(semicolonExpected)
		Code:code;

// ----------------------------------------------------------------------------------------------------------------	
				
OpaqueCodeBlock
	= Atom[] tokens
	::= (
		&TOK_LITERAL:~tokens |
		&TOK_STRING:~tokens |
		&TOK_VERBATIM_STRING:~tokens |
		&TOK_NUMBER:~tokens |
		&TOK_IDENT:~tokens |
		"{":~tokens OpaqueCodeBlock:~tokens "}":~tokens
	)*;
	
ParamList
	= ParamDef[] params
	::= "(" Param:~params* % "," ")";
	
Param
	= new ParamDef(
		string dir = "in",
		string type,
		ParamSemanticExp semantic,
		string name,
		Value defaultValue
	)
	::= [ParamDirection:dir]
	ParamType:type
	Identifier:name
	[ "<" ParamSemantic:semantic ">" ]
	[ "=" Value:defaultValue ];

ParamDirection
	= string dir
	::= "in":dir | "out":dir | "inout":dir | "own":dir;
	
ParamType
	= string type
	::= (Identifier ("[" [ParamType | Number] "]")*):type;
	
ParamSemantic
	= ParamSemanticExp value
	::=	ParamSemanticSum:value
	|	ParamSemanticExclusion:value
	|	"(" ParamSemantic:value ")"
	|	ParamSemanticTrait:value;

ParamSemanticSum
	= ParamSemanticExp createParamSemanticSum(ParamSemanticExp a, ParamSemanticExp b)
	::=	ParamSemantic:a "+" ParamSemantic:b;

ParamSemanticExclusion
	= ParamSemanticExp createParamSemanticExclusion(ParamSemanticExp a, ParamSemanticExp b)
	::=	ParamSemantic:a "-" ParamSemantic:b;

ParamSemanticTrait
	= ParamSemanticExp parseParamSemanticTrait(string name, Value value)
	::= (
			["in" "."] Identifier
		|	"in" "." Identifier "." "actual"
		):name "=" Value:value;

// ----------------------------------------------------------------------------------------------------------------

VarDef
	= VarDef parseVarDef(string name, Value value)
	::= Identifier:name "=" Value:value ";";
	
TemplateArg
	= VarDef parseVarDef(string name, Value value)
	::= Identifier:name "=" Value:value;
	
TemplateArgList
	= VarDef[] list
	::= TemplateArg:~list ( "," TemplateArg:~list )*;

Value
	= Value value
	::= StringValue:value |
	BooleanValue:value |
	Vector4Value:value |
	Vector3Value:value |
	Vector2Value:value |
	NumberValue:value |
	QuarkDefValue:value |
	KernelDefValue:value |
	GraphDefValue:value |
	GraphDefNodeValue:value |
	TraitDefValue:value |
	ParamListValue:value |
	IdentifierValue:value;
	
BooleanValue
	= new BooleanValue(string value)
	::= ("true" | "false"):value;

IdentifierValue
	= new IdentifierValue(string value)
	::= Identifier:value;

NumberValue
	= new NumberValue(double value)
	::= Number:value;
	
Vector2Value
	= new Vector2Value(double x, double y)
	::= Number:x Number:y;

Vector3Value
	= new Vector3Value(double x, double y, double z)
	::= Number:x Number:y Number:z;

Vector4Value
	= new Vector4Value(double x, double y, double z, double w)
	::= Number:x Number:y Number:z Number:w;

StringValue
	= new StringValue(char[] value)
	::= &TOK_STRING:value;
	
ParamListValue
	= new ParamListValue(ParamDef[] params)
	::= ParamList:params;

Identifier
	= string concatTokens(Atom[] value)
	::= ({&TOK_IDENT} % "."):value;

Number
	= double parseDouble(char[] value)
	::= &TOK_NUMBER:value;

String
	= string value
	::= &TOK_STRING:value;
	
